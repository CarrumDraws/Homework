1. How does HTTPS differ from HTTP? : HTTPS is HTTP, but has an extra layer of encryption that involves TLS/SSL Certificates.
2. Explain hashing. Why do we hash passwords and other sensitive information? : Hashing is encoding sensitive data in such a way that is still usable for us, but useless for someone else who has access to it. We hash passwords so that if they even get leaked in a data breach, their true values are still unknown.
3. Whatâ€™s the difference between authentication and authorization? : Authentication is about validating your identity (Signing in) while authorization is about determining what an authenticated user has access to (I am signed in on google, but I dont have google admin privledges to access other users' data)
4. Is HTTP stateful or stateless? What does it mean for it to be stateful or stateless? : HTTP is stateless. Statelessness is a property of REST API's, meaning that the server doesn't store info about the client's current session 
5. What are sessions and cookies? Why do we use them? : Sessions and Cookies are an outdated method of tracking state between a server and client, for example if a user is currently logged in or not. They break the rules of REST API's as they are stateful.  Cookies are pieces of data stored in the clients browser by the server, while sessions are data that is stored on the server. WE try not to use them! Instead we use Stateless, token-based auth such as JWT's.
6. Explain CSRF. How do we prevent it? : Cross-Site Request Forgery : An Attacker tricks authenticated users into sending requests. We can prevent this by avoiding cookie usage, making our GET's indempotent, and using CSRF Tokens.
7. Explain clickjacking. How do we prevent it? : Clickjacking is when someone gets an authenticated user to send a request without them knowing, by tricking them into clicking something that looks real. Can be prevented with X-Frame options and frame-killing, and securing HTTP HEaders with helmet.
8. Explain XSS. How do we prevent it? : Cross Site Scripting Attack : It's about injecting scripts into a website thorugh user input fields. We can prevent this with string sanitization and input validation.
9. What are regular expressions? : AKA Regex : A string that describes patterns for matching and selecting text
10. Explain token-based auth. Is it stateful or stateless and why? : Token based auth is a stateless method for tracking a client's login state. It is stateless as Cookies and Sessions are not involved- the client just has to store a token in sessionstorage.
11. What is JWT? : Json Web Token : the most popular token type for token-based auth. A payload is signed with a secret key.
12. Where can we store JWT? : JWT's are safe to store anywhere, but theyre typically stored in web storage (localStorage/sessionStorage).
13. What are the differences between JWT and sessions & cookies for user auth? : JWT's are stored in web storage, so the server doesn't need to store any data. They are stateless.
14. What is SOP? How do we fix it? : Single Origin policy : A defensive check that prevents scripts form one origin from interacting within the scripts of another. It can be bypassed by using CORS, thorugh Postman, or setting up a proxy.
15. What is CORS? : Cross Origin Resource Sharing : Safety feature that protocol that allows the bypassing of the SOP. 
16. What is SSO? What are some examples? : Single Sign On : Using one set of credentials to authenticate in a different application. "Sign in with Google."
17. What is OAuth 2.0? Describe the OAuth workflow in detail. OAuth 2.0 is a way to implement SSO. Let's say youre trying to sign-in with Google. You make a request to the server, and the server redirects you to the specified authorization server. The auth server authenticates you, and your data is not shared at all with the app. After, the server redirects to your apps redirect URI, and grants your app an access token to identify the user with in the future.