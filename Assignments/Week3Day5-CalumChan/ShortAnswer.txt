1. Explain when you should and should not use TypeScript. : Use it if you are either working on a large project with lots of moving parts or in a team, or value intellisense. If you are working along and the project is small, it could be a waste of time.
2. What is static type checking? How can developers benefit from it? : Unlike JS's dynamically typed nature, static type checking is ensuring that a variable/object stays true to a defined type. It is useful as it enables autocomplete and allows for the detection of type-related errors before runtime.
3. What is type inference? : In TS, if you don't define a type for a variable, TS can "infer" the type and auto-type it for you.
4. How does the array type differ from tuples? : An array is a dynamically sized group of elements that have the same type, while a tuple is a statically sized group of elements that could hold different types.
5. What are enums? : Enumerated Types: An object with named constants. There are Numeric and String Enums.
6. Explain the difference between type any and unknown. : Type any essentially excludes a varibale from typechecking altogether, while type unknown can skip type checking until  the variable is used, during whihc its type must be defined.
7. How do you type functions? : The same way you type variables: with the colon(:) symbol. This will type the return type. You'll have to type the parameters as well.
8. What is the difference between union and intersection types? : Union types allow for a variable to match more than one type. intersection types combine multiple types into one, like two objects into one larger object. Your variable will have to match all conditions.
9. What are type guards? What is narrowing? : Type grards are adding checks and if statements with the "typeof" keyword to "check" if a union/unknown type is a type or not. Narrowing is the concept behind why we need type guards- to better control the flow of code for variables that could be of different types.
10. What is type assertion? : it is like Type Guards, but they lock down the type of an element. Tells the compliler to treat the value like a specific type.
11. Explain the difference type alias vs interface. When should you use each one? : Alias- a name for a complex type that can be reused. An interface is similar to Aliases but are used to represent classes and complex objects due to their ability to extend off of other aliases. 
12. What is type readonly? : You can add readonly to a peroperty in a class, object, interface, or alias to amke the property immutable an unchangable. you can assign a value to it if it doesn't have one, but you can't change it after.
13. Explain the difference between public, private, protected. : they are property modifiers only for classes. Public properties are accessible even outside the class itself, private is only available within the class, and protected means its available in the class and any of its subclasses.
14. What are generics? : They allow you to essentially pass in a type as a variable, enabling you to change the type that is used in an operation.It is used in signatures, classes, interfaces, and aliases.